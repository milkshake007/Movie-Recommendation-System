# -*- coding: utf-8 -*-
"""Movie_Recommendation_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vrCzO_hVS8uXpVey4tpbKUsfy4cBi-zo
"""

#movie recommendation system using collebrative filtering
#collebrative filtering uses the uses based recommendation like rating, caste, directore etc

import pandas as pd
import numpy as np

movies = pd.read_csv("movies.csv")
ratings = pd.read_csv("ratings.csv")

movies.head()

ratings.head()

final_dataset = ratings.pivot(index="movieId", columns="userId", values="rating")

final_dataset

final_dataset.fillna(0, inplace=True)

final_dataset.head()

# Removing noise from dataset

no_user_voted = ratings.groupby("movieId")['rating'].agg('count')
no_movies_voted = ratings.groupby("userId")['rating'].agg('count')

import matplotlib.pyplot as plt
plt.style.use("ggplot")
fig,axes = plt.subplots(1,1, figsize=(16,4))
plt.scatter(no_user_voted.index, no_user_voted, color="hotpink")
plt.axhline(y=10, color='green')
plt.xlabel("MovieId")
plt.ylabel("No of users voted")
plt.show()

final_dataset = final_dataset.loc[no_user_voted[no_user_voted > 10].index, :]

final_dataset

import matplotlib.pyplot as plt
plt.style.use("ggplot")
fig,axes = plt.subplots(1,1, figsize=(16,4))
plt.scatter(no_movies_voted.index, no_movies_voted, color="hotpink")
plt.axhline(y=50, color='green')
plt.xlabel("User ID")
plt.ylabel("No of users voted")
plt.show()

final_dataset = final_dataset.loc[: , no_movies_voted[no_movies_voted>50].index]

final_dataset.shape

final_dataset.head()

2121*378

sample = np.array([[1,0,0,0,0], [0,0,2,0,0], [0,0,4,0,0]])
sparsity = 1.0 - (np.count_nonzero(sample) / float(sample.size))
print(sparsity)

from scipy.sparse import csr_matrix
csr_sample = csr_matrix(sample)
print(csr_sample)

csr_data = csr_matrix(final_dataset.values)
final_dataset.reset_index(inplace=True)

print(csr_data)

from sklearn.neighbors import NearestNeighbors
knn = NearestNeighbors(metric='cosine', algorithm = 'brute', n_neighbors = 20, n_jobs = -1)
knn.fit(csr_data)

movies

def get_recommendation(movie_name):
    movie_list = movies[movies['title'].str.contains(movie_name, case=False, na=False)]
    if len(movie_list):
        movie_idx = movie_list.iloc[0]['movieId']
        try:
            movie_idx = final_dataset[final_dataset['movieId'] == movie_idx].index[0]
        except IndexError:
            return ["Movie not found..."]

        distance, indices = knn.kneighbors(csr_data[movie_idx], n_neighbors=6)
        recommendations = []

        for idx in indices.flatten()[1:]:
            rec_movie_id = final_dataset.iloc[idx]['movieId']
            rec_movie = movies[movies['movieId'] == rec_movie_id]["title"].values[0]
            recommendations.append(rec_movie)

        return recommendations
    else:
        return ["Movie not found..."]


get_recommendation("Avatar")